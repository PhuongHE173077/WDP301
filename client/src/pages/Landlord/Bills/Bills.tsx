import React, { useEffect, useState } from "react"
import {
    Table,
    TableBody,
    TableCell,
    TableHead,
    TableHeader,
    TableRow,
} from "@/components/ui/table"
import { Button } from "@/components/ui/button"
import { CircleCheckBigIcon, CirclePlusIcon, DollarSignIcon, Pencil, Trash2, XCircleIcon } from "lucide-react"
import { deleteBillAPIs, fetchBills, getOrderIsActiveAPIs, updateBillAPIs } from "@/apis"
import dayjs from "dayjs"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { useNavigate } from "react-router-dom"
import { set } from "date-fns"
import SearchOrderDialog from "./components/DialogAdd"
import { Tooltip, TooltipContent, TooltipTrigger } from "@/components/ui/tooltip"
import Swal from "sweetalert2"

const ITEMS_PER_PAGE = 7

export const Bills: React.FC = () => {
    const [bills, setBills] = useState([])
    const [page, setPage] = useState(1)
    const [statusFilter, setStatusFilter] = useState("all")
    const [roomFilter, setRoomFilter] = useState("")
    const [monthFilter, setMonthFilter] = useState(String(dayjs().month() + 1))
    const [yearFilter, setYearFilter] = useState(String(dayjs().year()))
    const [showAllUnpaid, setShowAllUnpaid] = useState(false)
    const [orders, setOrders] = useState([])
    const [open, setOpen] = useState(false)

    const monthNames = [
        "Th√°ng 1", "Th√°ng 2", "Th√°ng 3", "Th√°ng 4", "Th√°ng 5", "Th√°ng 6",
        "Th√°ng 7", "Th√°ng 8", "Th√°ng 9", "Th√°ng 10", "Th√°ng 11", "Th√°ng 12"
    ]
    const currentYear = dayjs().year()
    const yearOptions = Array.from({ length: 5 }, (_, i) => String(currentYear - i))

    useEffect(() => {
        fetchData()
    }, [])
    const fetchData = async () => {
        await fetchBills().then((res) => {
            setBills(res.data)
        })
        await getOrderIsActiveAPIs().then((res) => {
            setOrders(res.data)
        })
    };

    const calculate = (array: any) => {
        let total = 0
        array.forEach((item: any) => {
            if (item.name !== "ƒëi·ªán" && item.name !== "n∆∞·ªõc") {
                total += item.price
            }
        })
        return total
    }

    const navigate = useNavigate();

    const filteredBills = bills.filter((bill: any) => {
        const billDate = dayjs(bill?.duration)

        const matchesStatus =
            statusFilter === "all" ||
            (statusFilter === "paid" && bill.status === "paid") ||
            (statusFilter === "unpaid" && bill.status !== "paid")

        const matchesRoom =
            roomFilter.trim() === "" ||
            bill?.room?.id?.toLowerCase().includes(roomFilter.trim().toLowerCase())

        const matchesMonth = billDate.month() + 1 === Number(monthFilter)
        const matchesYear = billDate.year() === Number(yearFilter)

        if (showAllUnpaid) {
            return bill.status !== "paid" && matchesRoom
        }

        return matchesStatus && matchesRoom && matchesMonth && matchesYear
    })

    const totalPages = Math.ceil(filteredBills.length / ITEMS_PER_PAGE)
    const paginatedData = filteredBills.slice(
        (page - 1) * ITEMS_PER_PAGE,
        page * ITEMS_PER_PAGE
    )

    const handlePrev = () => setPage((p) => Math.max(p - 1, 1))
    const handleNext = () => setPage((p) => Math.min(p + 1, totalPages))

    useEffect(() => {
        setPage(1)
    }, [statusFilter, roomFilter, monthFilter, yearFilter, showAllUnpaid])


    const handlePayment = (bill: any) => {
        Swal.fire({
            title: bill?.status === 'unpaid'
                ? `üîî Thanh to√°n ph√≤ng ${bill?.room?.id}?`
                : `‚ùå H·ªßy thanh to√°n ph√≤ng ${bill?.room?.id}?`,
            html: "<strong style='color:#555;'>B·∫°n s·∫Ω kh√¥ng th·ªÉ kh√¥i ph·ª•c h√†nh ƒë·ªông n√†y!</strong>",
            icon: 'warning',
            iconColor: '#f39c12',
            showCancelButton: true,
            confirmButtonColor: '#1abc9c',    // xanh ng·ªçc
            cancelButtonColor: '#e74c3c',     // ƒë·ªè ƒë·∫≠m
            confirmButtonText: bill?.status === 'unpaid' ? '‚úÖ Thanh to√°n' : 'üóëÔ∏è H·ªßy thanh to√°n',
            cancelButtonText: 'üö´ ƒê√≥ng',
            background: '#fdfdfd',
            backdrop: `rgba(0,0,0,0.4)`,
            customClass: {
                title: 'text-xl font-semibold',
                confirmButton: 'px-5 py-2',
                cancelButton: 'px-5 py-2'
            }
        }).then(async (result) => {
            if (result.isConfirmed) {
                await updateBillAPIs(bill._id, { status: bill?.status === 'unpaid' ? 'paid' : 'unpaid' }).then((res) => {
                    fetchData()
                })
            }
        });
    }

    const handleDelete = (bill: any) => {
        Swal.fire({
            title: `üóëÔ∏è X√≥a h√≥a ƒë∆°n ph√≤ng ${bill?.room?.id}?`,
            html: "<strong style='color:#d35400;'>H√†nh ƒë·ªông n√†y s·∫Ω x√≥a vƒ©nh vi·ªÖn v√† kh√¥ng th·ªÉ kh√¥i ph·ª•c!</strong>",
            icon: 'warning',
            iconColor: '#e74c3c', // m√†u ƒë·ªè
            showCancelButton: true,
            confirmButtonColor: '#c0392b',      // ƒë·ªè ƒë·∫≠m h∆°n
            cancelButtonColor: '#7f8c8d',       // x√°m tro
            confirmButtonText: '‚úîÔ∏è X√≥a',
            cancelButtonText: '‚ùå H·ªßy',
            background: '#fffdfd',
            backdrop: `rgba(0, 0, 0, 0.5)`,
            customClass: {
                title: 'text-xl font-bold text-red-600',
                confirmButton: 'px-5 py-2 bg-red-600 hover:bg-red-700 text-white rounded-md',
                cancelButton: 'px-5 py-2 bg-gray-400 hover:bg-gray-500 text-white rounded-md'
            }
        }).then(async (result) => {
            if (result.isConfirmed) {
                try {
                    await deleteBillAPIs(bill._id);
                    fetchData();
                    Swal.fire({
                        icon: 'success',
                        title: 'ƒê√£ x√≥a!',
                        text: 'H√≥a ƒë∆°n ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng.',
                        timer: 1500,
                        showConfirmButton: false,
                        background: '#f0f9f5',
                        iconColor: '#27ae60'
                    });
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'L·ªói!',
                        text: 'Kh√¥ng th·ªÉ x√≥a h√≥a ƒë∆°n. Vui l√≤ng th·ª≠ l·∫°i.',
                        background: '#fff0f0',
                        iconColor: '#c0392b'
                    });
                }
            }
        });

    }
    return (
        <div className="p-4 space-y-4">
            {/* Filter Controls */}
            <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
                <div className="flex gap-2 items-center flex-wrap">
                    <Input
                        placeholder="T√¨m theo s·ªë ph√≤ng"
                        value={roomFilter}
                        onChange={(e) => setRoomFilter(e.target.value)}
                        className="w-[160px]"
                    />

                    <Select value={statusFilter} onValueChange={setStatusFilter}>
                        <SelectTrigger className="w-[160px]">
                            <SelectValue placeholder="Tr·∫°ng th√°i" />
                        </SelectTrigger>
                        <SelectContent>
                            <SelectItem value="all">T·∫•t c·∫£</SelectItem>
                            <SelectItem value="paid">Thanh to√°n</SelectItem>
                            <SelectItem value="unpaid">Ch∆∞a thanh to√°n</SelectItem>
                        </SelectContent>
                    </Select>

                    <Select value={monthFilter} onValueChange={setMonthFilter} disabled={showAllUnpaid}>
                        <SelectTrigger className="w-[140px]">
                            <SelectValue placeholder="Th√°ng" />
                        </SelectTrigger>
                        <SelectContent>
                            {monthNames.map((name, index) => (
                                <SelectItem key={index} value={String(index + 1)}>
                                    {name}
                                </SelectItem>
                            ))}
                        </SelectContent>
                    </Select>

                    <Select value={yearFilter} onValueChange={setYearFilter} disabled={showAllUnpaid}>
                        <SelectTrigger className="w-[120px]">
                            <SelectValue placeholder="NƒÉm" />
                        </SelectTrigger>
                        <SelectContent>
                            {yearOptions.map((year) => (
                                <SelectItem key={year} value={year}>
                                    {year}
                                </SelectItem>
                            ))}
                        </SelectContent>
                    </Select>


                </div>

                <div className="flex items-center gap-2">
                    {/* <Button className="bg-gradient-to-br from-pink-500 via-red-400 to-yellow-300 text-black" onClick={() => navigate("/Payments")}>
                        <DollarSignIcon className="mr-1" />
                        Thanh to√°n tr∆∞·ªõc
                    </Button> */}
                    <Button className="bg-gradient-to-br from-pink-500 via-red-400 to-yellow-300 text-black" onClick={() => setOpen(true)}>
                        <CirclePlusIcon className="mr-2" />
                        T·∫°o h√≥a ƒë∆°n
                    </Button>
                </div>

            </div>
            <div className="flex items-center space-x-2">
                <input
                    type="checkbox"
                    id="showAllUnpaid"
                    checked={showAllUnpaid}
                    onChange={(e) => setShowAllUnpaid(e.target.checked)}
                />
                <label htmlFor="showAllUnpaid" className="text-sm">
                    T·∫•t c·∫£ ƒë∆°n ch∆∞a thanh to√°n
                </label>
            </div>
            {/* Table for desktop */}
            <div className="overflow-x-auto hidden md:block rounded-lg border">
                <Table className="min-w-[700px] bg-white">
                    <TableHeader>
                        <TableRow>
                            <TableHead className="text-black">ID ph√≤ng</TableHead>
                            <TableHead className="text-black">Ng∆∞·ªùi thu√™</TableHead>
                            <TableHead className="text-black">Ti·ªÅn ph√≤ng</TableHead>
                            <TableHead className="text-black">Ti·ªÅn ƒêi·ªán & n∆∞·ªõc </TableHead>
                            <TableHead className="text-black">Ti·ªÅn d·ªãch v·ª•</TableHead>
                            <TableHead className="text-black">T·ªïng ti·ªÅn</TableHead>
                            <TableHead className="text-black">Tr·∫°ng th√°i</TableHead>
                            <TableHead className="text-right text-black">Ch·ª©c nƒÉng</TableHead>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        {paginatedData.map((bill: any) => (
                            <TableRow key={bill._id}>
                                <TableCell>{bill?.room?.id}</TableCell>
                                <TableCell>{bill?.tenants?.name}</TableCell>
                                <TableCell>{bill?.priceRoom?.toLocaleString()} ƒë</TableCell>
                                <TableCell>{(bill?.electricityBill + bill?.waterbill).toLocaleString()} ƒë  </TableCell>
                                <TableCell>{calculate(bill?.servicePrice).toLocaleString()} ƒë</TableCell>

                                <TableCell>
                                    {bill?.total.toLocaleString()} ƒë
                                </TableCell>
                                <TableCell>
                                    {bill?.status === "paid" ? (
                                        <div className="text-green-500 font-bold">Thanh to√°n</div>
                                    ) : (
                                        <div className="text-red-500 font-bold">Ch∆∞a thanh to√°n</div>
                                    )}
                                </TableCell>
                                <TableCell className="text-right space-x-2">
                                    <Tooltip>
                                        <TooltipTrigger>
                                            <Button variant="outline" size="icon" onClick={() => handlePayment(bill)}>
                                                {bill?.status !== "paid" ? <CircleCheckBigIcon className="w-4 h-4 text-green-500" /> : <XCircleIcon className="w-4 h-4 text-red-500" />}
                                            </Button>
                                        </TooltipTrigger>
                                        <TooltipContent>
                                            <p>{bill?.status === "paid" ? "H·ªßy Thanh to√°n" : "Thanh to√°n"} </p>
                                        </TooltipContent>
                                    </Tooltip>
                                    <Button variant="destructive" size="icon" onClick={() => handleDelete(bill)}>
                                        <Trash2 className="w-4 h-4" />
                                    </Button>
                                </TableCell>
                            </TableRow>
                        ))}
                    </TableBody>
                </Table>
            </div>

            {/* Mobile view */}
            <div className="block md:hidden space-y-4">
                {paginatedData.map((bill: any) => (
                    <div key={bill._id} className="border rounded-xl p-4 shadow-sm bg-white">
                        <div className="text-sm mb-2"><strong>ID:</strong> {bill?.room?.id}</div>
                        <div className="text-sm mb-2"><strong>Ng∆∞·ªùi thu√™:</strong> {bill?.tenants?.name}</div>
                        <div className="text-sm mb-2"><strong>Ti·ªÅn ph√≤ng:</strong> {bill?.priceRoom?.toLocaleString()} ƒë</div>
                        <div className="text-sm mb-2"><strong>Ti·ªÅn d·ªãch v·ª•:</strong> {calculate(bill?.room?.serviceFee).toLocaleString()} ƒë</div>
                        <div className="text-sm mb-2"><strong> Ti·ªÅn ƒëi·ªán & n∆∞·ªõc:</strong>{(bill?.electricityBill + bill?.waterbill).toLocaleString()} ƒë </div>
                        <div className="text-sm mb-2"><strong>T·ªïng ti·ªÅn:</strong> {bill?.total.toLocaleString()} ƒë</div>
                        <div className="text-sm mb-2">
                            <strong>Tr·∫°ng th√°i:</strong>{" "}
                            {bill?.status === "paid" ? (
                                <span className="text-green-500 font-bold">Thanh to√°n</span>
                            ) : (
                                <span className="text-red-500 font-bold">Ch∆∞a thanh to√°n</span>
                            )}
                        </div>
                        <div className="flex justify-end space-x-2 mt-2">
                            <Tooltip>
                                <TooltipTrigger>
                                    <Button variant="outline" size="icon">
                                        <Pencil className="w-4 h-4" />
                                    </Button>
                                </TooltipTrigger>
                                <TooltipContent>
                                    <p>{bill?.status === "paid" ? "Thanh to√°n" : "Ch∆∞a Thanh to√°n"} </p>
                                </TooltipContent>
                            </Tooltip>

                            <Button variant="destructive" size="icon">
                                <Trash2 className="w-4 h-4" />
                            </Button>
                        </div>
                    </div>
                ))}
            </div>

            {/* Pagination */}
            {totalPages > 1 && (
                <div className="flex justify-center items-center gap-4 mt-6">
                    <Button
                        onClick={handlePrev}
                        disabled={page === 1}
                        className="rounded-full px-4 py-2 bg-gray-200 text-gray-700 hover:bg-gray-300 disabled:opacity-50"
                    >
                        ‚Üê Tr∆∞·ªõc
                    </Button>
                    <span className="text-sm font-medium text-muted-foreground">
                        Trang <span className="text-primary font-semibold">{page}</span> / {totalPages}
                    </span>
                    <Button
                        onClick={handleNext}
                        disabled={page === totalPages}
                        className="rounded-full px-4 py-2 bg-blue-600 text-white hover:bg-blue-700 disabled:opacity-50"
                    >
                        Sau ‚Üí
                    </Button>
                </div>
            )}
            <SearchOrderDialog open={open} setOpen={setOpen} orders={orders} fetchData={fetchData} />
        </div>
    )
}
